内容一：总体概述
文件是对磁盘的抽象，指一组带标识（即文件名）、在逻辑上有完整意义的信息项的序列。
一个目录文件由若干个目录项组成，目录项中记录文件名和文件相对应的inode在整个inode区的索引号，文件inode结构中除了存放文件的属性外，最主要的是文件的索引表。
Nachos的文件系统，Nachos在其模拟磁盘上实现了文件系统，可以按照用户的要求创建和删除文件；按照用户要求对文件进行读写操作；对存放文件的存储空间进行管理，为各个文件自动分配必要的物理存储空间，并为文件的逻辑结构以及它在存储空间中的物理位置建立映照关系；用户只需通过文件名就可以对文件进行存放，文件的物理组织对用户透明。
这里需要注意的一点是，nachos中实现了两套文件系统，他们对外接口是完全一致的。一套是FILESYS_STUB，建立在UNIX文件系统之上，不使用nachos 的模拟磁盘，主要用于先行实现其他依赖于文件系统的功能。另一套是Nachos的文件系统，实现在Nachos的虚拟磁盘之上，即不定义FILESYS_STUB。
##文件基本操作部分##
内容二：源代码阅读
同步磁盘分析（synchdisk）
Nachos是一个多线程的系统，需要对线程访问做出限制，同时只能有一个线程访问磁盘，当发出磁盘访问请求后，必须等待访问的真正结束，
SynchDisk类中包括物理异步磁盘设备disk，控制读写磁盘返回的信号量semaphore，控制只有一个线程访问的锁lock。
在磁盘读写中，线程向磁盘设备发出读写请求后，执行P操作，等待磁盘中断的到来，一旦磁盘中断到来，中断处理执行执行V操作，ReadSector继续运行。
能满足多线程并发，同时只能有一个线程访问磁盘；当发出磁盘访问请求后，必须等待访问的真正结束。
synchdisk类，同步磁盘。Write/ReadSector，同步读写磁盘，只有当真正读写完毕后返回。Disk为物理异步磁盘设备，以及控制读写磁盘返回的信号量和控制只有一个线程访问的锁。

位图模块分析（bitmap）
利用位图管理磁盘空闲块。

文件系统模块（filesys）
Filesys文件，在filesys.h中，说明了nachos的文件系统由两份实现，他们对外的接口是完全一样的，一套称作为FILESYS_STUB，建立在UNIX文件系统之上，不使用Nahcos的模拟磁盘，直接读写宿主操作系统上的文件，用于先实现用户程序和虚拟内存，以及维护一个宿主机上的DISK文件作为 NachOS 的模拟磁盘，在其上进行基于 Sector 的操作。
首先定义FileSyetem文件系统类，包括生成文件的create函数，输入文件名创建文件，如果不存在会创建，创建失败返回-1；close函数根据输入的数字关闭指定文件；open打开函数同理；但返回的是一个openfile数据结构；List列出根目录系统中所有文件；print列出所有文件并输出内容；freeMapFile位图文件打开文件结构；directoryFile根目录打开文件结构。
Filesys.cc文件，FileSystem构造方法，在同步磁盘的基础上建立一个文件系统。传入布尔值format判断是否进行格式化，如果是则建立一个新的文件系统，生成新的位图和空白的根目录，生成位图和目录，在位图中标识0和1号扇区被占用，为位图文件和目录文件申请必要的空间，将位图和目录写回0和1号扇区，打开位图和目录文件并写入相应文件中；否则使用原来文件系统中的内容，打开位图文件和目录文件，返回。
FileSystem(bool format) 构造函数，在同步磁盘的基础上建立一个文件系统，format代表是否建立新的文件系统，包括建立新的位图、根目录和FileHeader。
Create方法，利用文件名创建文件，如果发现不是已经存在的，申请文件FileHeader所需空间，并根据新文件的大小申请相应块数的扇区。

文件头模块（filehdr）
即inode结构，给出一个文件除了文件名之外的所有属性，包括文件长度、地址索引表等。（文件名属性在目录中给出）。所谓索引表，就是表示文件的逻辑地址和实际的物理地址的对应关系。Nachos的文件头可以存放在磁盘上，也可以存放在宿主机中。在磁盘上存放时一个文件头占用一个独立的扇区。Nachos文件头的索引表为直接索引。
打开文件结构（openfile）
定义了一个打开文件控制结构，当用户打开了一个文件时，系统即为其产生一个打开文件控制结构。
目录模块（directory）
目录实际上是一张表，将字符形式的文件名与实际文件的文件头相对应。便于用户通过文件名来访问文件。

内容三：拓展文件属性

内容四：拓展文件长度

内容五：实现多级目录

内容六：动态调整文件长度

##文件访问的同步与互斥##
内容七：源代码阅读

内容八：实现文件系统的同步互斥访问机制

内容九：性能优化

内容十：实现pipe机制


