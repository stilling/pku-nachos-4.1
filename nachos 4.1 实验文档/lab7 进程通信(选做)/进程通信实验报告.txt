一、进程通信
      进程通信是指进程之间的信息交换。信号量的PV操作是低级通信的方式，高级通信方式是指以较高的效率传输大量数据的通信方式。
      1.共享内存
        在通信的进程之间建立一块可直接访问的共享空间，通过对这片共享空间的写/读操作实现进程之间的信息交换。在对共享空间进行写/读操作时，用同步互斥工具(如P/V操作）对共享空间的读/写进行控制。
        共享储存又分为两种：低级方式的共享是基于数据结构的共享；高级方式是基于储存区的共享。操作系统只负责为通信进程提供可共享使用的存储空间和同步互斥工具，数据交换则由用户自己安排读/写指令完成。
        用户进程空间一般是独立的，进程运行期间不能访问其他进程的空间，两个用户进程共享空间需要通过特殊的系统调用实现。
      2.消息传递
         在消息传递系统中，进程间以格式化的消息(Message）为单位进行数据交换。若通信的进程之间不存在可直接访问的共享空间，则利用操作系统提供的消息传递方式实现进程通信。
         进程通过系统提供的发送消息和接收消息两个原语进行数据交换。
       （1）直接通信方式：发送进程直接把消息发送给接收进程，并将它挂在接收进程的消息缓冲队列上，接收进程从消息缓冲队列取得消息。
       （2）间接通信方式：发送进程把消息发送到某个中间实体中，接收进程从中间实体中取得消息。中间实体又被成为信箱，这种通信方式也被成为邮箱通信方式。
      3.管道通信（共享文件）
         管道通信是消息传递的一种特殊方式。所谓“管道”，是指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件，又名pipe文件。向管道（共享文件）提供输入的发送进程（即写进程），
         以字符流形式将大量的数据送入写管道；而接收管道输出的接收进程（即读进程），则从管道中接收（读）数据。管道机制提供了互斥、同步和确定对面的存在三方面的协调能力以协调进程双方的通信。
二、Linux中进程通信机制的实现
       1.管道(Pipe)及有名管道(named pipe)：在Linux中，管道是一种非常频繁的通信机制，有名管道克服了管道没有名字的限制，可以在没有亲缘关系的进程之间实现通信。从本质上说，管道也是一种文件，与一般文件的区别主要在两点：
       (1) 限制管道的大小。管道是一个固定大小的缓冲区，从Linux中大小为4KB。在写管道write()变满时，需要进行阻塞。
       (2) 读进程可能比写进程工作的快，需要进行管道为空时的read()操作阻塞。
       从管道读数据是一次性操作，数据一旦被读取就会从管道中被抛弃，释放空间以便写更多数据。管道只能采用半双工通信，即某一时刻只能单向传输。对于父子进程的双方互动通信，需定义两个管道。
       管道文件将共享内存空间变为了缓冲区，缓冲区只允许一边写入另一边读出，可以理解为一个先进先出的队列数据结构，写进程会先将缓冲区写满再让读进程读。

       2.信号（Signal）
      信号本质
      信号是在软件层次上对中断机制的一种模拟，在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。信号是异步的，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。
      信号是进程间通信机制中唯一的异步通信机制，可以看作是异步通知，通知接收信号的进程有哪些事情发生了。信号机制经过POSIX实时扩展后，功能更加强大，除了基本通知功能外，还可以传递附加信息。
      
       3.报文(Message)队列（消息队列）

       4.共享内存
       将同一块物理内存映射到进程A、B各自的进程地址空间。
       5.信号量

       6.套接字(Socket)
       Socket用于客户方和服务方的通信，在两个应用直接建立连接。
       ● 发起呼叫连接请求的一方为客户方 
       在客户方呼叫连接请求之前，它必须知道服务方在哪里。所以需要知道服务方所在机器的IP地址或机器名称，如果客户方和服务方事前有一个约定就好了，这个约定就是PORT（端口号）。也就是说，客户方可以通过服务方所在机器的IP地址或机器名称和端口号唯一的确定方式来呼叫服务方。
       ● 接受呼叫连接请求的一方成为服务方
       在客户方呼叫之前，服务方必须处于侦听状态，侦听是否有客户要求建立连接。一旦接到连接请求，服务方可以根据情况建立或拒绝连接。当客户方的消息到达服务方端口时，会自动触发一个事件（event），服务方只要接管该事件，就可以接受来自客户方的消息了。
       Socket类型有
       ● 流失Socket(STREAM): 一种面向连接的Socket，针对面向连接的TCP服务应用，安全但效率低
       ● 数据报式Socket(DATAGAM): 一种无连接的Socket，对应于无连接的UDP服务应用。不安全（丢失，顺序混乱，在接受端要分析重排及要求重发），但效率高。
       1. 服务端welcoming socket 绑定监听端口，设置监听队列，开始监听端口（负责监听客户端连接消息）
       2. 客户端client socket 建立连接，连接服务端指定端口（负责接受和发送服务端消息）
       3. 服务端welcoming socket 监听到客户端连接，循环等待客户端连接，创建connection socket（负责和客户端连接）
       4. 发送和接受数据，最后关闭