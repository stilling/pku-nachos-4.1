Makefile
Make 是一个命令工具，用来解释makefile文件中的规则，文件中可以使用系统shell提供的命令。
Makefile为C/C++的编译而生，关系到了整个工程的编译规则，它定义了一系列的规则来指定文件的编译顺序。
首先要把源文件编译成中间文件，然后通过链接把文件合成执行文件。
Makefile的规则：
Target…:prerequisites…（make会比较两个文件的修改日期，依赖目标新于目标时执行）
Command
Target是一个目标文件，可以是object文件，也可以是执行文件，还可以是一个标签。
prerequisites就是，要生成那个target所需要的文件或是目标。command也就是make需要执行的命令。（任意的Shell命令）
makefile文件以执行文件edit开头（第一个目标文件），后面是中间目标文件（*.o），依赖文件.c和.h。
每一个.o文件都有一组依赖文件，而这些依赖文件又是执行文件edit的依赖文件。

在默认的方式下，也就是我们只输入make命令。那么，
1、make会在当前目录下找名字叫“Makefile”或“makefile”的文件。
2、如果找到，它会找文件中的第一个目标文件（target），在上面的例子中，他会找到“edit”这个文件，并把这个文件作为最终的目标文件。
3、如果edit文件不存在，或是edit所依赖的后面的 .o 文件的文件修改时间要比edit这个文件新，那么，他就会执行后面所定义的命令来生成edit这个文件。
4、如果edit所依赖的.o文件也不存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件。（这有点像一个堆栈的过程）
5、当然，你的C文件和H文件是存在的啦，于是make会生成 .o 文件，然后再用 .o 文件生命make的终极任务，也就是执行文件edit了。
Make会一层又一层地去找文件的依赖关系，直到最终编译出第一个目标文件。

2.Nachos的makefile结构
在终端下进入相应目录，利用 make 或 make all 命令，可依据该目录下的Makefile 文件生成包含相应功能的 Nachos 可执行程序。Makefile 文件的内容主要包括下述两条语句:include Makefile.local/include ../Makefile.common.
Makefile.local文件主要是对一些编译、链接及运行时所使用的宏进行定义。
（1）CCFILES：指定在该目录下生成Nachos 时所涉及到的C++源文件；
（2）INCPATH：指明所涉及的C++源程序中的头文件(.h 文件)所在的路径，以
便利用g++进行编译链接时通过这路径查找这些头文件。
（3）DEFINES：传递个 g++的一些标号或者宏。

Makefile.dep文件根据安装Nachos时所使用的操作系统环境，定义一些相应的宏，供g++使用。
Makefile.common文件定义了编译链接生成一个完整的Nachos可执行文件所需要的所有规则。
